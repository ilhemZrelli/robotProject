pipeline {
    agent any
    environment {
        CLIENT_ID = "6E635966EBAA4D79BED0403429B9568F"
        SECRET_ID = "325cd0f88ba4d83360cae863783ad63c06a274e8b2e8820a134a8af91a410bc0"
        XRAY_AUTH_URL = 'https://xray.cloud.getxray.app/api/v2/authenticate'
        GIT_REPO = 'https://github.com/ilhemZrelli/robotProject.git'
        XRAY_TOKEN = ""
        WEBHOOK_URL = 'https://discordapp.com/api/webhooks/1359154405147934992/2RwoZD57gNSStkB8yxAUT4O7jAe7OOAECZTCuMj9tDW6RBHYUaCjgon1E05MoTjsaQlg'
    }

    stages {
        stage('Générer le token Xray') {
            steps {
                script {
                    def authResponse = bat(
                        script: """
                            curl -H "Content-Type: application/json" -X POST --data ^
                            "{\\"client_id\\": \\"${CLIENT_ID}\\", \\"client_secret\\": \\"${SECRET_ID}\\"}" ^
                            ${XRAY_AUTH_URL} 2> nul
                        """,
                        returnStdout: true
                    ).trim()

                    // Récupère la dernière ligne = le token
                    def lines = authResponse.readLines()
                    def token = lines[1].replaceAll('"', '').trim()

                    XRAY_TOKEN = token
                    echo "Xray Token: ${XRAY_TOKEN}"
                }
            }
        }


        stage('Exporter le résultat sur Xray') {
            steps {
                script {
                    def ExportResponse = bat(
                        script: """
                            curl -H "Content-Type: text/xml" -X POST -H "Authorization: Bearer ${XRAY_TOKEN}"  --data @"Logs/output.xml" https://xray.cloud.getxray.app/api/v2/import/execution/robot?projectKey=POEI20252
                        """,
                        returnStdout: true
                    ).trim()

                    echo "Features de Xray exportées : ${ExportResponse}"
                }
            }
        }
          stage('send result to dsicord') {
            steps {
        script {
            // Define the test result and the path to the XML output file
            def testResult = "Test execution completed: Passed all tests"
            def outputFilePath = "Logs/output.xml" // Update with the actual path to your output.xml file

            // Create the payload with the test result message
            def payloadJson = """
            {
                "username": "TestBot",
                "content": "Test result: ${testResult}"
            }
            """

            // Send the message along with the output.xml file to Discord
            bat(script: """
                curl -X POST $WEBHOOK_URL ^
                -F "payload_json=${payloadJson}" ^
                -F "file1=@${outputFilePath}"  // Attach the output.xml file
            """)
        }
    }
          }

    }
}